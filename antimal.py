#!/usr/bin/env python3
import psutil
import time
from subprocess import call
from prettytable import PrettyTable
import os
import sys

# Run an infinite loop to constantly monitor the system
detection_counter = 0
#suspicious data structure
susp = {}
while True:

    # Clear the screen using a bash command
    # call('clear')

    # print("==============================Process Monitor\
    # ======================================")
    # Fetch all processes from available processes
    # print("----Processes----")
    process_table = PrettyTable(['PID', 'PNAME', 'STATUS',
                                 'CPU', 'NUM THREADS', 'memory used in MB'])

    # for pid in psutil.pids()[-10:]:
    for p in psutil.process_iter():
        # While fetching the processes, some of the subprocesses may exit
        # Hence we need to put this code in try-except block
        if p.status() == 'stopped':
            continue
        try:
            # memory usage in MB
            memory_usage = p.memory_full_info().rss / 1000000
            # memory allocation detection
            if (memory_usage > 198) and (memory_usage < 202):
                start = time.time()
                finish = start + 12
                flag = 0
                while (time.time() <= finish) and flag == 0:
                    memory_usage = p.memory_full_info().rss / 1000000
                    # detection of free memory
                    remain_time = finish - time.time()
                    if (memory_usage > 0) and (memory_usage < 10) and (remain_time <= 2):
                        start = time.time()
                        finish = start + 12
                        # memory allocation detection again to compelete the sequence
                        while (time.time() <= finish) and flag == 0:
                            memory_usage = p.memory_full_info().rss / 1000000
                            remain_time = finish - time.time()
                            #Here sequence is detected
                            if (memory_usage > 198) and (memory_usage < 202) and (remain_time <= 2):
                                suspPid = p.pid
                                if suspPid in susp:
                                    susp[suspPid] = susp[suspPid] + 1
                                    if susp[suspPid]==3:
                                    	print(susp)
                                    	dirc=str(p.exe())
                                    	#get dircetory whithout file name
                                    	while dirc[-1]!='/':
                                    		dirc = dirc[:-1:]
                                    	dirc = dirc[:-1:]
                                    	
                                    	lastdirc='cd '+'"'+dirc+'"'
                                    	os.system('cd /')
                                    	os.system(lastdirc)
                                    	#generate block command
                                    	blockcommand='chmod '+'a=r '+str(p.name())
                                    	os.system(blockcommand)
                                    	p.kill();
                                    	del susp[suspPid]
                                    	print("Proces Name ({0})  with PID  ({1})  Has Been Killed ..!".format(p.name(),p.pid))
                                else:
                                    susp[suspPid] = 1
                                print(susp)
                                flag = 1
        except Exception as e:
            pass

# Create a 1 second delay